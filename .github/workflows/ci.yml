name: CI Tests
on:
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"
      - ".gitignore"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "README.md"
      - ".gitignore"
  schedule:
    - cron: "0 5 4 * *" # run at 5:00am on the 4th of each month
jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      #----------------------------------------------
      #        load pip cache if cache exists
      #----------------------------------------------
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip
      #----------------------------------------------
      #          install and run linters
      #----------------------------------------------
      - run: python -m pip install black
      - run: |
          black . --check --diff
  test:
    strategy:
      fail-fast: true
      max-parallel: 4
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    runs-on: ${{ matrix.os }}
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          version: "2.0.1"
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      #    run test suite
      #----------------------------------------------
      - name: Run unit tests
        run: |
          source .venv/bin/activate
          pytest -v
      - name: Run tests with v2 keys
        env:
          IS_KEY_ID: ${{ secrets.IS_KEY_ID_V2 }}
          IS_KEY: ${{ secrets.IS_KEY_V2 }}
        run: |
          source .venv/bin/activate
          for test in $(find examples -name \*.py -type f); do python ${test}; done
      - name: Run tests with v3 keys
        env:
          IS_KEY_ID: ${{ secrets.IS_KEY_ID_V3 }}
          IS_KEY: ${{ secrets.IS_KEY_V3 }}
        run: |
          source .venv/bin/activate
          for test in $(find examples -name \*.py -type f); do python ${test}; done
      - name: Run tests with OAuth
        env:
          IS_OAUTH_CLIENT_ID: ${{ secrets.IS_OAUTH_CLIENT_ID }}
          IS_OAUTH_CLIENT_SECRET: ${{ secrets.IS_OAUTH_CLIENT_SECRET }}
        run: |
          source .venv/bin/activate
          for test in $(find examples -name \*.py -type f); do python ${test}; done
